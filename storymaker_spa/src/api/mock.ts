/* Lightweight mock API â€“ toggled via VITE_API_MOCK=true */
import { ApiResponse, Book, Character } from './types';

function delay(ms: number) { return new Promise(r => setTimeout(r, ms)); }

const characters: Character[] = [
  {
    id: '1111',
    name: 'Plushie Duck',
    type: 'toy',
    description: 'Soft yellow plush',
    created_at: new Date().toISOString(),
  },
];

const books: Book[] = [
  {
    id: 'b-demo',
    name: 'Demo Book',
    description: 'Generated by mock API',
    created_at: new Date().toISOString(),
    cover_image: undefined,
    page_count: 10,
  },
];

export default async function mockFetch<T>(path: string, opts: RequestInit = {}): Promise<T> {
  await delay(120);                           // simulate latency
  const { method = 'GET' } = opts;

  // ---------------------- Books ----------------------
  if (path.startsWith('/api/books') && method === 'GET')
    return { status: 'ok', data: books } as ApiResponse<Book[]> as unknown as T;

  if (path.startsWith('/api/books') && method === 'POST')
    return { status: 'ok', data: { book_id: 'new-book-id' } } as unknown as T;

  // ------------------- Characters --------------------
  if (path.startsWith('/api/characters') && method === 'GET')
    return { status: 'ok', data: characters } as ApiResponse<Character[]> as unknown as T;

  if (path.startsWith('/api/characters') && method === 'POST')
    return { status: 'ok', data: { character_id: 'new-char-id' } } as unknown as T;

  // ---------------------- Auth -----------------------
  if (path === '/api/login' && method === 'POST')
    return { status: 'ok', data: { access_token: 'mock-jwt', token_type: 'bearer' } } as unknown as T;

  if (path == '/api/me' && method === 'GET')
    return {
      status: 'ok',
      data: { id: '0000', email: 'dev@local', display_name: 'Mock Dev' },
    } as unknown as T;

  throw new Error(`mockFetch: unhandled route ${method} ${path}`);
}
