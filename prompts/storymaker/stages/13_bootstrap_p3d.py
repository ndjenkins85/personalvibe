# Copyright © 2025 by Nick Jenkins. All rights reserved

# python prompts/storymaker/stages/13_bootstrap_p3d.py
# bootstrap_chunk_d.py
"""
Storymaker – Chunk D  –  Studio UI (frontend wizard)

Run this single Python file once from anywhere inside the repository.
It will…

1. Locate the git-root via personalvibe.vibe_utils.get_base_path()
2. Create / patch frontend files required for the new **Studio** wizard:
      • src/api/types.ts                (typed DTOs)
      • src/components/StepProgress.tsx (simple breadcrumb header)
      • src/components/CharacterSelect.tsx
      • src/pages/StudioPage.tsx        (2-step wizard)
3. Print next-steps for people new to React / SPA workflow.

Nothing outside the *storymaker_spa* folder is modified.
"""

from __future__ import annotations

import os
from pathlib import Path
from textwrap import dedent

from personalvibe import vibe_utils

REPO = vibe_utils.get_base_path()
SPA = REPO / "storymaker_spa" / "src"


# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------
def ensure(parent: Path) -> None:
    parent.mkdir(parents=True, exist_ok=True)


def write(path: Path, content: str) -> None:
    ensure(path.parent)
    path.write_text(content.strip() + "\n")
    print(f" ✔ wrote {path.relative_to(REPO)}")


# ---------------------------------------------------------------------------
# 1. types.ts – shared DTOs (imported by existing client.ts)
# ---------------------------------------------------------------------------
write(
    SPA / "api" / "types.ts",
    dedent(
        """
        /* Autogenerated by Chunk D – strongly-typed DTOs shared across UI  */

        // ---------- Generic API envelope ----------
        export interface ApiResponse<T = any> {
          status: 'ok' | 'error';
          data: T;
          meta?: any;
          error?: string;
        }

        // ---------- Domain models -----------------
        export interface Character {
          id: string;
          name: string;
          type: 'adult' | 'child' | 'toy';
          description: string;
          avatar_path?: string | null;
          created_at?: string;
        }

        export interface Book {
          id: string;
          name: string;
          description: string;
          created_at: string;   // ISO
          cover_image?: string | null;
          page_count: number;
        }

        // ---------- Auth helpers ------------------
        export interface LoginResponse {
          access_token: string;
          token_type: string;
        }

        export interface MeResponse {
          id: string;
          email: string;
          display_name: string;
        }
        """
    ),
)

# ---------------------------------------------------------------------------
# 2. StepProgress component (breadcrumb style header)
# ---------------------------------------------------------------------------
write(
    SPA / "components" / "StepProgress.tsx",
    dedent(
        """
        import React from 'react';

        interface Props {
          current: number;      // 1-based
          total: number;
          labels: string[];
        }

        export default function StepProgress({ current, total, labels }: Props) {
          return (
            <ol style={{ display: 'flex', listStyle: 'none', padding: 0, marginBottom: '1rem' }}>
              {labels.map((label, idx) => {
                const step = idx + 1;
                const isActive = step === current;
                return (
                  <li key={label} style={{
                    flex: 1,
                    textAlign: 'center',
                    padding: '.3rem .5rem',
                    borderBottom: `3px solid ${isActive ? 'dodgerblue' : '#ccc'}`,
                    fontWeight: isActive ? 600 : 400
                  }}>
                    {step}. {label}
                  </li>
                );
              })}
            </ol>
          );
        }
        """
    ),
)

# ---------------------------------------------------------------------------
# 3. CharacterSelect (single-select drop-down)
# ---------------------------------------------------------------------------
write(
    SPA / "components" / "CharacterSelect.tsx",
    dedent(
        """
        import React from 'react';
        import { Character } from '../api/types';

        interface Props {
          characters: Character[];
          value: string | null;
          onChange: (id: string) => void;
        }

        export default function CharacterSelect({ characters, value, onChange }: Props) {
          return (
            <select value={value ?? ''} onChange={(e) => onChange(e.target.value)} style={{ minWidth: '200px' }}>
              <option value="" disabled>Select…</option>
              {characters.map((c) => (
                <option key={c.id} value={c.id}>{c.name} ({c.type})</option>
              ))}
            </select>
          );
        }
        """
    ),
)

# ---------------------------------------------------------------------------
# 4. StudioPage – 2-step wizard (background ➜ review)
# ---------------------------------------------------------------------------
write(
    SPA / "pages" / "StudioPage.tsx",
    dedent(
        """
        import React, { useEffect, useState } from 'react';
        import { listCharacters, createBook } from '../api/client';
        import { Character } from '../api/types';
        import StepProgress from '../components/StepProgress';
        import CharacterSelect from '../components/CharacterSelect';

        // ------------------------- Step 1 form state --------------------------
        interface BookForm {
          name: string;
          description: string;
          main_character: string | null;        // id
          side_characters: string[];            // ids
        }

        const emptyForm: BookForm = {
          name: '',
          description: '',
          main_character: null,
          side_characters: [],
        };

        export default function StudioPage() {
          // wizard state ------------------------------------------------------
          const [step, setStep] = useState<1 | 2>(1);

          // data --------------------------------------------------------------
          const [chars, setChars] = useState<Character[]>([]);
          const [loadingChars, setLoadingChars] = useState(true);

          // form --------------------------------------------------------------
          const [form, setForm] = useState<BookForm>(emptyForm);
          const [saving, setSaving] = useState(false);
          const [error, setError] = useState<string | null>(null);
          const [newBookId, setNewBookId] = useState<string | null>(null);

          // fetch characters once --------------------------------------------
          useEffect(() => {
            listCharacters()
              .then((r) => setChars(r.data))
              .catch((e) => setError(e.message))
              .finally(() => setLoadingChars(false));
          }, []);

          // utils -------------------------------------------------------------
          const update = <K extends keyof BookForm>(key: K, value: BookForm[K]) =>
            setForm((f) => ({ ...f, [key]: value }));

          const toggleSideCharacter = (id: string) =>
            update(
              'side_characters',
              form.side_characters.includes(id)
                ? form.side_characters.filter((c) => c !== id)
                : [...form.side_characters, id],
            );

          // -------------------------------------------------------------------
          // STEP 1 → submit
          // -------------------------------------------------------------------
          const next = async () => {
            setSaving(true);
            setError(null);
            try {
              const payload = {
                name: form.name,
                description: form.description,
                main_character: chars.find((c) => c.id === form.main_character),
                side_characters: chars.filter((c) => form.side_characters.includes(c.id)),
                chapters: [],
              };
              const res = await createBook(payload);
              setNewBookId(res.data.book_id);
              setStep(2);
            } catch (e: any) {
              setError(e.message);
            } finally {
              setSaving(false);
            }
          };

          // -------------------------------------------------------------------
          // RENDER
          // -------------------------------------------------------------------
          return (
            <section style={{ maxWidth: '640px', margin: '0 auto' }}>
              <h1>Story Studio</h1>
              <StepProgress current={step} total={2} labels={['Story background', 'Review & finish']} />

              {error && <p style={{ color: 'red' }}>{error}</p>}

              {step === 1 && (
                <>
                  {loadingChars ? <p>Loading characters…</p> : (
                    <form
                      onSubmit={(e) => { e.preventDefault(); next(); }}
                      style={{ display: 'flex', flexDirection: 'column', gap: '.8rem' }}
                    >
                      <label>
                        Book name<br/>
                        <input
                          type="text"
                          value={form.name}
                          onChange={(e) => update('name', e.target.value)}
                          required
                          maxLength={80}
                          style={{ width: '100%' }}
                        />
                      </label>

                      <label>
                        Description<br/>
                        <textarea
                          value={form.description}
                          onChange={(e) => update('description', e.target.value)}
                          rows={3}
                          style={{ width: '100%' }}
                        />
                      </label>

                      <label>
                        Main character<br/>
                        <CharacterSelect
                          characters={chars}
                          value={form.main_character}
                          onChange={(id) => update('main_character', id)}
                        />
                      </label>

                      <fieldset style={{ border: '1px solid #ddd', padding: '.5rem' }}>
                        <legend>Side characters (optional)</legend>
                        {chars.map((c) => (
                          <label key={c.id} style={{ display: 'block' }}>
                            <input
                              type="checkbox"
                              checked={form.side_characters.includes(c.id)}
                              onChange={() => toggleSideCharacter(c.id)}
                              disabled={c.id === form.main_character}
                            />{" "}
                            {c.name} ({c.type})
                          </label>
                        ))}
                      </fieldset>

                      <button type="submit" disabled={saving || !form.name || !form.main_character}>
                        {saving ? 'Saving…' : 'Next'}
                      </button>
                    </form>
                  )}
                </>
              )}

              {step === 2 && (
                <>
                  <p>✅ Book stub created with id <code>{newBookId}</code>.</p>
                  <p>Script generation & chapter editing UI will arrive in the next chunk.</p>
                  <button onClick={() => { window.location.href = '/books'; }}>
                    Go to “My Books”
                  </button>
                </>
              )}
            </section>
          );
        }
        """
    ),
)

# ---------------------------------------------------------------------------
# Friendly instructions for newcomers
# ---------------------------------------------------------------------------
print(
    dedent(
        f"""
        ─────────────────────────────────────────────────────────────
        🎉  Studio UI wizard scaffolding installed!

        Next steps (for first-time React users)
        ─────────────────────────────────────────────────────────────
        1. Ensure Node ≥ 20 is installed (recommended via nvm):
               nvm install 20 && nvm use 20

        2. Install JS dependencies:
               cd {REPO / 'storymaker_spa'}
               npm install

        3. Run the Flask backend in a separate shell:
               poetry run python -m storymaker.api.app

        4. Launch the front-end dev server:
               npm run dev         # → http://localhost:5173

        5. Open “Studio” in the top nav, create a dummy character first
           under “Characters”, then walk through the 2-step wizard.

        6. Generated books will appear in “My Books”.

        Tip: During local dev the SPA talks to Flask using the special
             header “Authorization: DEV”, so no login is required yet.

        All files modified by this script live under *storymaker_spa/src/*.
        If something looks off, simply re-run the script or adjust files
        manually—Vite will hot-reload in the browser.

        Happy hacking! 🚀
        ─────────────────────────────────────────────────────────────
        """
    )
)
